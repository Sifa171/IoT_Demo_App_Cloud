//GLOBAL.DEBUG = true;

var assert = require("assert");
var async = require("async");
var Database = require("../lib/fhmongodb.js").Database;
var lodash = require("lodash");


var config = {
  "database" : {
    "host" : "localhost",
    "port" : 27017,
    "name" : "fh_ditch_test",
    "adminauth" : {
          "user": "admin",
          "pass": "admin" 
        },
    "auth" : {
      "user": "ditchuser",
      "pass": "ditchpassword" 
    },
    "driver_options": {w:1, j:1}
  }
}

//It is possible to create an array of ports as part of a replica set connection
var port_array_config = {
  "database" : {
    "host" : ["localhost"],
    "port" : [27017],
    "name" : "fh_ditch_test",
    "adminauth" : {
          "user": "admin",
          "pass": "admin" 
        },
    "auth" : {
      "user": "ditchuser",
      "pass": "ditchpassword" 
    },
    "driver_options": {w:1, j:1}
  }
}

var host_string_array_config = {
  "database" : {
    "host" : "localhost,127.0.0.1",
    "port" : 27017,
    "name" : "fh_ditch_test",
    "adminauth" : {
          "user": "admin",
          "pass": "admin" 
        },
    "auth" : {
      "user": "ditchuser",
      "pass": "ditchpassword" 
    },
    "driver_options": {w:1, j:1}
  }
}


exports['test configDriverOptions'] = function(){

  //Creating a new database connection with no config options
  var db = new Database(config.database.host, config.database.port, undefined);
  assert.ok(db);
  //Checking whether the default driver settings are applied
  assert.ok(lodash.isEqual(db.driver_options, { w: 1, j: true, numberOfRetries: 5, retryMiliSeconds: 2000, native_parser:false}));

  var dbWithConfig = new Database(config.database.host, config.database.port, {w:3, j:false, "someOtherOption":"someOtherOptionValue"});
  assert.ok(dbWithConfig);

  assert.ok(lodash.isEqual(dbWithConfig.driver_options, {w:3, j:false, "someOtherOption":"someOtherOptionValue", numberOfRetries: 5, retryMiliSeconds: 2000, native_parser:false}));

}

exports['test portArray'] = function() {
  var self = this;
  self.db = new Database(port_array_config.database.host, port_array_config.database.port, {native_parser: false});
  self.db.name = "test-fhmongodb-testPort";

  self.db.on("tearUp", function(){
    self.db.db.authenticate(port_array_config.database.adminauth.user, port_array_config.database.adminauth.user,{authSource:"admin"}, function(err, result){
      assert.isNull(err);

      self.db.tearDown();
    });
  });

  self.db.tearUp();


}

exports['test hostStringArray'] = function() {
  var self = this;
  self.db = new Database(host_string_array_config.database.host, host_string_array_config.database.port, {native_parser: false});
  self.db.name = "test-fhmongodb-testPort";

  self.db.on("tearUp", function(){
    self.db.db.authenticate(host_string_array_config.database.adminauth.user, host_string_array_config.database.adminauth.user,{authSource:"admin"}, function(err, result){
      assert.isNull(err);

      self.db.tearDown();
    });
  });

  self.db.tearUp();
}


exports['test removeAll'] = function () {
  var self = this;

  self.db = new Database();
  self.db.name = "test-fhmongodb-database2-removeall";
  self.test_collection = "testremoveall";
  self.test_initial_data = [
    {id: '1', type: 't1'},
    {id: '2', type: 't2'},
    {id: '3', type: 't1'},
    {id: '4', type: 't2'},
    {id: '5', type: 't3'}
  ];
  self.db.on('tearUp', function () {
    self.db.db.authenticate(config.database.adminauth.user, config.database.adminauth.user,{authSource:"admin"}, function(err, result){
      self.db.dropDatabase(function(err) {
        assert.ok(!err, JSON.stringify(err));

        self.db.create(self.test_collection, self.test_initial_data, function (err, docs) {
          assert.ok(!err, JSON.stringify(err));

          self.db.find(self.test_collection, {}, function(err, items) {
            assert.ok(!err, JSON.stringify(err));
            assert.strictEqual(items.length, 5);

            self.db.removeAll(self.test_collection, function (err, numDeleted) {
              assert.ok(!err, JSON.stringify(err));
              assert.strictEqual(numDeleted, 5);

              self.db.find(self.test_collection, {}, function(err, items) {
                assert.ok(!err, JSON.stringify(err));
                assert.strictEqual(items.length, 0);
                self.db.tearDown();

              });
            });
          });
        });
      });
    });
    
  });
  
  self.db.tearUp(); // no proceed by opening db
};


exports['test Distinct'] = function () {

    var self = this;
    self.db = new Database();
    self.db.name = "test-fhmongodb-database2";
    self.test_collection = "testdistinked";
    self.test_initial_data = [
      {id: '1', type: 't1'},
      {id: '2', type: 't2'},
      {id: '3', type: 't1'},
      {id: '4', type: 't2'},
      {id: '5', type: 't3'}
    ];
    self.db.on('tearUp', function () {

      self.db.db.authenticate(config.database.adminauth.user, config.database.adminauth.user,{authSource:"admin"}, function(err, result){
        self.db.dropDatabase(function(err) {
          assert.ok(!err, JSON.stringify(err));
          self.db.removeAll(self.test_collection, function (err) {
            assert.ok(!err, JSON.stringify(err));
            self.db.create(self.test_collection, self.test_initial_data, function (err, docs) {
              assert.ok(!err, JSON.stringify(err));
              self.db.distinct(self.test_collection, 'type', {}, function (err, items) {
                assert.ok(!err, JSON.stringify(err));
                assert.strictEqual(items.length, 3, "Invalid items length, expected 3, items was: " + JSON.stringify(items));
                    self.db.tearDown();
              });
            });
          });
        });

      });
      
    });
    
    self.db.distinct(self.test_collection, 'type', {}, function (err, items) {
      assert.ok(err, 'should signal error, since no db open');
      self.db.tearUp(); // no proceed by opening db
    });
  };

  
exports[ 'test basic database ops' ] = function () {
    var self = this;
    self.database = new Database();
    var foundItems = false;

    self.database.name = "test-fhmongodb-database";
    var test_collection_name1 = "testcollection1";
    var test_collection_name2 = "testcollection2";

    function do_ops() {

      self.database.db.authenticate(config.database.adminauth.user, config.database.adminauth.user,{authSource:"admin"}, function(err, result){
        assert.ok(!err);
        self.database.dropDatabase(function(err) {
          assert.equal(err, null);

          self.database.removeAll(test_collection_name2, function(err, items) {
            assert.ok(!err);
            self.database.create(test_collection_name2, [{
              id: '1',
              type: 't1'
            },{
              id: '2',
              type: 't1'
            },{
              id: '3',
              type: 't2'
            }], function(err, docs) {
              assert.ok(!err, JSON.stringify(err));

              var query = {
                keys : ['type'], 
                initial: { count : 0 }, 
                reduce: "function (obj, prev) {prev.count++;}"
              };
              
              self.database.group(test_collection_name2, query, function (err, results) {
                assert.ok(!err, JSON.stringify(err));
                // expected response [{"type":"t1","count":2},{"type":"t2","count":1}]
                assert.equal(2, results.length);
                var g0 = results[0];
                assert.equal('t1', g0.type);
                assert.equal(2, g0.count);
                var g1 = results[1];
                assert.equal('t2', g1.type);
                assert.equal(1, g1.count);
              });
            });
          });
          
          self.database.removeAll(test_collection_name1, function(err, items) {
            assert.equal(err, null);
            self.database.create(test_collection_name1, {
              test1 : "test value1",
              test2 : "test value2"
            }, function(err, docs) {
              assert.ok(!err, JSON.stringify(err));
              self.database.find(test_collection_name1, {}, function(err, items) {
                assert.ok(!err, JSON.stringify(err));
                var numItems = items.length;
                assert.equal(1, numItems);
                items.forEach(function(item) {
                  // sys.puts(JSON.stringify(item));
                  foundItems = true;
                  numItems--;
                  if (numItems < 1) {
                  }
                });
              });

              var tc2 = test_collection_name1 + "2";
              self.database.collectionExists(test_collection_name1, function(err, exists) {
                assert.equal(exists, true);
                self.database.createCollectionWithIndex(tc2, 'MD5',
                    function(err) {
                      assert.equal(err, null);
                      async.series([
                        function (cb) {
                          self.database.countCollection(test_collection_name1,
                            function(err, count) {
                              assert.equal(count, 1);
                              return cb();
                            });
                        },
                        function(cb) {
                          self.database.collectionNames(function(err, names) {
                            assert.notEqual(names.length, 0);
                            return cb();
                          });
                        },
                        function(cb) {
                          self.database.findOne(test_collection_name1, {
                            test1 : 'test value1'
                          }, {}, function(err, item) {
                            assert.equal(item.test1, 'test value1');
                            return cb();
                        });
                        }
                      ], function(err, results) {
                        self.database.tearDown();
                        assert.ok(!err);
                      });
                    });
              });
            });
          });
        });


      });
      
    };
    
    self.database.on('tearUp', do_ops);
    self.database.tearUp();

};
